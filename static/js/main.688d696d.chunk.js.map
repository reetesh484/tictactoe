{"version":3,"sources":["Components/Icon.js","App.js","reportWebVitals.js","index.js"],"names":["Icon","name","className","itemArray","Array","fill","App","useState","isCross","setIsCross","winMessage","setWinMessage","changeItem","itemNumber","toast","type","Container","position","Row","Col","md","Button","color","block","onClick","map","item","index","Card","CardBody","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.688d696d.chunk.js","sourcesContent":["import React from \"react\"\r\nimport { FaTimes, FaPen , FaRegCircle } from 'react-icons/fa'\r\n\r\n const Icon = ({ name }) => {\r\n    switch (name) {\r\n        case 'circle':\r\n            return <FaRegCircle className=\"icons\" />\r\n            break;\r\n        case 'cross':\r\n            return <FaTimes className=\"icons\" />\r\n            break;\r\n    \r\n        default:\r\n            return <FaPen className=\"icons\" />\r\n    }\r\n }\r\n\r\n export default Icon;","import React,{ useState } from \"react\"\n// import logo from './logo.svg';\nimport Icon from \"./Components/Icon\"\n\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport {Card, CardBody, Container, Button, Col, Row} from \"reactstrap\"\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './App.css';\nimport { FaCentercode } from \"react-icons/fa\";\n\n\nconst itemArray = new Array(9).fill(\"empty\")\n\nconst  App = () => {\n\n  const [isCross , setIsCross] = useState(false);\n  const [winMessage, setWinMessage] = useState(\"\")\n\n  const reloadGame  = () => {\n    setIsCross(false);\n    setWinMessage(\"\");\n    itemArray.fill(\"empty\",0,9);\n  }\n\n  const checkIsWinner = () => {\n    if(itemArray[0] == itemArray[1] &&\n      itemArray[0] == itemArray[2] && itemArray[0] != \"empty\"\n      ){\n        setWinMessage(`${itemArray[0]} wins`)\n      }\n    else if(itemArray[0] == itemArray[3] &&\n      itemArray[0] == itemArray[6] && itemArray[0] != \"empty\"\n      ){\n        setWinMessage(`${itemArray[0]} wins`)\n      }\n    else if(itemArray[3] == itemArray[4] &&\n        itemArray[3] == itemArray[5] && itemArray[3] != \"empty\"\n        ){\n          setWinMessage(`${itemArray[3]} wins`)\n        }\n    else if(itemArray[6] == itemArray[7] &&\n          itemArray[6] == itemArray[8] && itemArray[6] != \"empty\"\n          ){\n            setWinMessage(`${itemArray[6]} wins`)\n          }\n    else if(itemArray[1] == itemArray[4] &&\n            itemArray[1] == itemArray[7] && itemArray[1] != \"empty\"\n            ){\n              setWinMessage(`${itemArray[1]} wins`)\n            }\n    else if(itemArray[2] == itemArray[5] &&\n              itemArray[2] == itemArray[8] && itemArray[2] != \"empty\"\n              ){\n                setWinMessage(`${itemArray[2]} wins`)\n              }\n    else if(itemArray[0] == itemArray[4] &&\n                itemArray[0] == itemArray[8] && itemArray[0] != \"empty\"\n                ){\n                  setWinMessage(`${itemArray[0]} wins`)\n                }\n    else if(itemArray[2] == itemArray[4] &&\n                  itemArray[2] == itemArray[6] && itemArray[2] != \"empty\"\n                  ){\n                    setWinMessage(`${itemArray[2]} wins`)\n                  }\n                \n  }\n\n\n  const changeItem = (itemNumber) => {\n    if(winMessage){\n      return toast(winMessage,{type: \"success\"})\n    }\n\n    if(itemArray[itemNumber] == \"empty\"){\n\n      itemArray[itemNumber] = isCross ? \"cross\" : \"circle\";\n      setIsCross(!isCross)\n\n    }else{\n      return toast(\"already filled\",{type:\"error\"})\n    }\n\n    checkIsWinner();\n  }\n  \n  \n  return (\n    <Container className=\"p-5\">\n      <ToastContainer position=\"bottom-center\" />\n      <Row>\n        <Col md={6} className=\"offset-md-3\">\n          {winMessage ? (\n            <div className=\"mb-2 mt-2\">\n              <h1 className=\"text-primary text-uppercase text-center\">\n                {winMessage}\n              </h1>\n              <Button color=\"success\" block onClick={reloadGame}>Reload Game</Button>\n            \n            </div>\n          ) : (\n            <h1 className=\"text-center text-warning\">\n              {isCross ? \"Cross\" : \"Circle\"} turns\n            </h1>\n          )}\n          <div className=\"grid\">\n            {itemArray.map((item,index) => (\n              <Card color=\"warning\" onClick={ () => changeItem(index)}>\n                <CardBody className=\"box\">\n                  <Icon name={item}/>\n                </CardBody>\n              </Card>\n            ))}\n          </div>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}