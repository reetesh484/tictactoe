{"version":3,"sources":["Components/Icon.js","App.js","reportWebVitals.js","index.js"],"names":["Icon","name","className","itemArray","Array","fill","console","log","App","flag","useState","isCross","setIsCross","winMessage","setWinMessage","changeItem","itemNumber","toast","type","map","item","Container","position","Row","Col","md","Button","color","block","onClick","index","Card","CardBody","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.734f1479.chunk.js","sourcesContent":["import React from \"react\"\r\nimport { FaTimes, FaPen , FaRegCircle } from 'react-icons/fa'\r\n\r\n const Icon = ({ name }) => {\r\n    switch (name) {\r\n        case 'circle':\r\n            return <FaRegCircle className=\"icons\" />\r\n            break;\r\n        case 'cross':\r\n            return <FaTimes className=\"icons\" />\r\n            break;\r\n    \r\n        default:\r\n            return <FaPen className=\"icons\" />\r\n    }\r\n }\r\n\r\n export default Icon;","import React, { useState } from \"react\";\n// import logo from './logo.svg';\nimport Icon from \"./Components/Icon\";\n\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\nimport { Card, CardBody, Container, Button, Col, Row } from \"reactstrap\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./App.css\";\nimport { FaCentercode } from \"react-icons/fa\";\n\nconst itemArray = new Array(9).fill(\"empty\");\nconsole.log(itemArray)\n\nconst App = () => {\n  var flag =0;\n\n  const [isCross, setIsCross] = useState(false);\n  const [winMessage, setWinMessage] = useState(\"\");\n\n  const reloadGame = () => {\n    flag = 0;\n    setIsCross(false);\n    setWinMessage(\"\");\n    itemArray.fill(\"empty\", 0, 9);\n  };\n\n  const checkIsWinner = () => {\n    if (\n      itemArray[0] == itemArray[1] &&\n      itemArray[0] == itemArray[2] &&\n      itemArray[0] != \"empty\"\n    ) {\n      setWinMessage(`${itemArray[0]} wins`);\n    } else if (\n      itemArray[0] == itemArray[3] &&\n      itemArray[0] == itemArray[6] &&\n      itemArray[0] != \"empty\"\n    ) {\n      setWinMessage(`${itemArray[0]} wins`);\n    } else if (\n      itemArray[3] == itemArray[4] &&\n      itemArray[3] == itemArray[5] &&\n      itemArray[3] != \"empty\"\n    ) {\n      setWinMessage(`${itemArray[3]} wins`);\n    } else if (\n      itemArray[6] == itemArray[7] &&\n      itemArray[6] == itemArray[8] &&\n      itemArray[6] != \"empty\"\n    ) {\n      setWinMessage(`${itemArray[6]} wins`);\n    } else if (\n      itemArray[1] == itemArray[4] &&\n      itemArray[1] == itemArray[7] &&\n      itemArray[1] != \"empty\"\n    ) {\n      setWinMessage(`${itemArray[1]} wins`);\n    } else if (\n      itemArray[2] == itemArray[5] &&\n      itemArray[2] == itemArray[8] &&\n      itemArray[2] != \"empty\"\n    ) {\n      setWinMessage(`${itemArray[2]} wins`);\n    } else if (\n      itemArray[0] == itemArray[4] &&\n      itemArray[0] == itemArray[8] &&\n      itemArray[0] != \"empty\"\n    ) {\n      setWinMessage(`${itemArray[0]} wins`);\n    } else if (\n      itemArray[2] == itemArray[4] &&\n      itemArray[2] == itemArray[6] &&\n      itemArray[2] != \"empty\"\n    ) {\n      setWinMessage(`${itemArray[2]} wins`);\n    } else {\n      itemArray.map(item => {\n        if(item === \"cross\" || item ===\"circle\"){\n        console.log(item)\n        flag=flag+1\n        console.log(flag)\n        }\n      })\n      if(flag===9)\n      setWinMessage(\"Draw\")\n    }\n  };\n\n  const changeItem = (itemNumber) => {\n    if (winMessage) {\n      return toast(winMessage, { type: \"success\" });\n    }\n\n    if (itemArray[itemNumber] == \"empty\") {\n      itemArray[itemNumber] = isCross ? \"cross\" : \"circle\";\n      setIsCross(!isCross);\n    } else {\n      return toast(\"already filled\", { type: \"error\" });\n    }\n\n    checkIsWinner();\n  };\n\n  return (\n    <Container className=\"p-5\">\n      <ToastContainer position=\"bottom-center\" />\n      <Row>\n        <Col md={6} className=\"offset-md-3\">\n          {winMessage ? (\n            <div className=\"mb-2 mt-2\">\n              <h1 className=\"text-primary text-uppercase text-center\">\n                {winMessage}\n              </h1>\n              <Button color=\"success\" block onClick={reloadGame}>\n                Reload Game\n              </Button>\n            </div>\n          ) : (\n            <h1 className=\"text-center text-warning\">\n              {isCross ? \"Cross\" : \"Circle\"} turns\n            </h1>\n          )}\n          <div className=\"grid\">\n            {itemArray.map((item, index) => (\n              <Card color=\"warning\" onClick={() => changeItem(index)}>\n                <CardBody className=\"box\">\n                  <Icon name={item} />\n                </CardBody>\n              </Card>\n            ))}\n          </div>\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}